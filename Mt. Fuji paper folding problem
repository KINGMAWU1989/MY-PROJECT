{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "7d10bb50",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "exceeded mt fuji on the 2th fold\n",
      "exceeded mt fuji on the 3th fold\n",
      "exceeded mt fuji on the 4th fold\n",
      "exceeded mt fuji on the 5th fold\n",
      "exceeded mt fuji on the 6th fold\n",
      "exceeded mt fuji on the 7th fold\n",
      "exceeded mt fuji on the 8th fold\n",
      "exceeded mt fuji on the 9th fold\n",
      "exceeded mt fuji on the 10th fold\n",
      "exceeded mt fuji on the 11th fold\n",
      "exceeded mt fuji on the 12th fold\n",
      "exceeded mt fuji on the 13th fold\n",
      "exceeded mt fuji on the 14th fold\n",
      "exceeded mt fuji on the 15th fold\n",
      "exceeded mt fuji on the 16th fold\n",
      "exceeded mt fuji on the 17th fold\n",
      "exceeded mt fuji on the 18th fold\n",
      "exceeded mt fuji on the 19th fold\n",
      "exceeded mt fuji on the 20th fold\n",
      "exceeded mt fuji on the 21th fold\n",
      "exceeded mt fuji on the 22th fold\n",
      "exceeded mt fuji on the 23th fold\n",
      "exceeded mt fuji on the 24th fold\n",
      "exceeded mt fuji on the 25th fold\n",
      "exceeded mt fuji on the 26th fold\n",
      "exceeded mt fuji on the 27th fold\n"
     ]
    }
   ],
   "source": [
    "#problem 1\n",
    "THICKNESS = 0.00008\n",
    "MT_FUJI = 3776#\n",
    "fold_times = 1\n",
    "current_thickness = 0\n",
    "while (current_thickness < 3776):\n",
    "    current_thickness =THICKNESS*(2**fold_times)\n",
    "    fold_times+=1#\n",
    "    print(\"exceeded mt fuji on the {}th fold\".format(fold_times))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "4b515468",
   "metadata": {},
   "outputs": [],
   "source": [
    "#problem 2\n",
    "CLOSEST_MON_SUN_STAR = 4.4\n",
    "LIGHT_YEAR = 9.5\n",
    "DISTANCE = (9.5 * 4.4)*1000000000000\n",
    "def calculate_folds_from_distance(distance):\n",
    "    problem2_fold_times = 1\n",
    "    problem2_current_thickness = 0\n",
    "    \n",
    "    while ((problem2_current_thickness//1000) < distance):\n",
    "           problem2_current_thickness =THICKNESS*(2**problem2_fold_times)\n",
    "           problem2_fold_times+=1\n",
    "           \n",
    "           return problem2_fold_times\n",
    "           \n",
    "           print(\"reached the closest mon star on the {}th fold\".format(calculate_folds_from_distance(DISTANCE)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "fc137858",
   "metadata": {},
   "outputs": [],
   "source": [
    "#problem 3\n",
    "def calclate_length_of_paper_from_folds(folds):\n",
    "    PROBLEM3_THICKNESS = 0.00008\n",
    "    length = (PROBLEM3_THICKNESS/6)*((2**folds)+4)*(2**folds-1)\n",
    "    DISTANCE_TO_THE_MOON = 384400*1000\n",
    "    \n",
    "    print(\"the length of papetr needed to be foldedto reach the moon is {m}\".format(calculate_fold_from_distance(DISTANCE)))\n",
    "    print(\"the length of papetr needed to be foldedto reach the mt fuji is {m}\".format(calculate_fold_from_distance(DISTANCE)))\n",
    "    print(\"the length of papetr needed to be foldedto reach the mon-sun star is {m}\".format(calculate_fold_from_distance(DISTANCE)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aa12f746",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e109863",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
